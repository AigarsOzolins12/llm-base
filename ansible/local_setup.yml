- name: Package download and install
  hosts: local
  become: yes
  vars_files:
    - ./vars/local_setup_vars.yml
  tasks:
    - name: Install python ENV package
      ansible.builtin.apt:
        name: "python3.12-venv"
        state: present
    - name: Setup docker engine apt packages
      ansible.builtin.shell: docker-engine-apt-package-setup.sh >> package-setup-log.txt
    - name: Install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: present
    - name: Install docker-ce-cli
      ansible.builtin.apt:
        name: docker-ce-cli
        state: present
    - name: Install containerd.io
      ansible.builtin.apt:
        name: containerd.io
        state: present
    - name: Install docker-buildx-plugin
      ansible.builtin.apt:
        name: docker-buildx-plugin
        state: present
    - name: Install docker-compose-plugin
      ansible.builtin.apt:
        name: docker-compose-plugin
        state: present
    - name: Add docker group if not exists
      ansible.builtin.group:
        name: docker
        state: present
    - name: Add current user to the DOCKER group
      command:
        cmd: "usermod -aG docker $USER"
    - name: Activate changes to the docker group
      command:
        cmd: "newgrp docker"
    - name: Download and install nodejs
      ansible.builtin.shell: ./nodejs-install.sh >> nodejs-setup-log.txt
    - name: Downlod and install NPM
      ansible.builtin.apt:
        name: npm
        state: present

- name: DEV env setup
  hosts: local
  vars_files:
    - ./vars/local_setup_vars.yml
  tasks:
    - name: Create python ENV
      command: 
        chdir: ..
        cmd: "python3 -m venv ./venv"
        creates: "./venv"
    - name: Create .ENV file from template
      command:
        chdir: ..
        cmd: "cp .env-template .env"
    - name: Compose up
      command: "docker compose up --build -d"
    - name: Download model
      command:
        chdir: ..
        cmd: "curl -L -o {{ base_model_save_as }} {{base_model_download_url}}"
        creates: "./ollama/external-models/{{ base_model_save_as }}"
    - name: Create external model directory in Ollama volume
      command: 
        chdir: ..
        cmd: "mkdir -p ./ollama/external-models"
        creates: "./ollama/external-models"
    - name: Move downloaded GGUF model to Ollama volume
      command:
        chdir: .. 
        cmd: "mv ./{{ base_model_save_as }} ./ollama/external-models/{{ base_model_save_as }}"
        creates: "./ollama/external-models/{{ base_model_save_as }}"
    - name: Copy modelfile to Ollama volume
      command:
        chdir: ..
        cmd: "cp ./ollama-modelfiles/{{ base_model_ollama_file }} ./ollama/external-models/{{ base_model_ollama_file }}"
        creates: "./ollama/external-models/{{ base_model_ollama_file }}"
    - name: Load downloaded model into Ollama
      community.docker.docker_container_exec:
        container: ollama
        command: /bin/bash -c "ollama create {{ model_name }} -f /root/.ollama/external-models/{{ base_model_ollama_file }}"
    - name: Install NPM packages for nextjs django frontend
      community.general.npm:
        path: ../nextjs-django-frontend